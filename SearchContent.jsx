import React, { useState, useEffect } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";

const SearchContent = () => {
  const [searchParams] = useSearchParams();
  const searchQuery = searchParams.get("q") || "";
  const [books, setBooks] = useState([]);
  const [sort, setSort] = useState("highest_price");
  const [bookStore, setBookStore] = useState("1");
  const [city, setCity] = useState("1");
  const [currency, setCurrency] = useState(localStorage.getItem("currency") || "lev");
  const navigate = useNavigate();

  useEffect(() => {
    if (searchQuery) {
      fetchBooks();
    }
  }, [searchQuery, sort, bookStore, city]);

  const handleBookClick = (event, bookId) => {
    const loggedUser = localStorage.getItem("loggedUser"); // Check if user is logged in
  
    if (!loggedUser) {
      event.preventDefault();
      alert("üîí –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∑–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞ –∫–Ω–∏–≥–∞—Ç–∞!");
    } else {
      // First, increment the VisitedCount on the backend
      fetch(`http://localhost:5000/increment-visited-count/${bookId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // If the increment was successful, navigate to the book detail page
            navigate(`/book/${bookId}`);
          } else {
            console.error("Failed to increment visited count.");
          }
        })
        .catch((error) => {
          console.error('‚ùå Error updating visited count:', error);
        });
    }
  };

  const fetchBooks = async () => {
    const queryParams = new URLSearchParams({
      q: searchQuery, // Use the actual searchQuery from URL
      sort: sort,      // Use the selected sort option
      bookStore: bookStore,  // Use the selected bookStore
      city: city       // Use the selected city
    }).toString();
  
    try {
      console.log('Query Params:', queryParams.toString());

      const response = await fetch(`http://localhost:5000/search-books?${queryParams}`);
  
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
  
      const data = await response.json();
      console.log(data);  // Log the fetched books data
  
      setBooks(data); // Set books to state
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ:', error);
    }
  };

  const convertPrice = (price) => {
    const exchangeRates = { 
      lev: 1, 
      dollar: 0.55, 
      euro: 0.51 
    };

    const symbols = {
      lev: "–ª–≤.",
      dollar: "$",
      euro: "‚Ç¨"
    };

    if (!exchangeRates[currency]) return `${price} –ª–≤.`; // Fallback

    return `${(price * exchangeRates[currency]).toFixed(2)} ${symbols[currency]}`;
  };
  
  // üîπ Handle Form Submit to Apply Filters
  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent page reload
    console.log("Applying filters:", { searchQuery, sort, bookStore, city }); // Debug log
    fetchBooks(); // Fetch books with selected filters
  };
  

  return (
    <div className="center_content">
      <div className="center_title_bar">
        {searchQuery ? `–†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞: "${searchQuery}"` : "–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –¥—É–º–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ"}
      </div>

      {/* üîπ Filtering Form */}
      <div className="center_title_bar">
        <form onSubmit={handleSubmit}>
          –°–æ—Ä—Ç–∏—Ä–∞–π:
          &nbsp;
          <select id="sort" value={sort} onChange={(e) => setSort(e.target.value)}>
            <option value="highest_price">–¶–µ–Ω–∞ - –Ω–∞–π-–≤–∏—Å–æ–∫–∞</option>
            <option value="lowest_price">–¶–µ–Ω–∞ - –Ω–∞–π-–Ω–∏—Å–∫–∞</option>
            <option value="newest">–ù–∞–π - –Ω–æ–≤–∏</option>
            <option value="name">–ò–º–µ</option>
          </select>
          &nbsp;
          –ö–Ω–∏–∂–∞—Ä–Ω–∏—Ü–∞:
          &nbsp;
          <select id="book_store" value={bookStore} onChange={(e) => setBookStore(e.target.value)}>
            <option value="1">–í—Å–∏—á–∫–∏</option>
            <option value="–•–µ–ª–∏–∫–æ–Ω">–•–µ–ª–∏–∫–æ–Ω</option>
            <option value="–û—Ä–∏–Ω–¥–∂">–û—Ä–∏–Ω–¥–∂</option>
            <option value="–°–∏–µ–ª–∞">–°–∏–µ–ª–∞</option>
          </select>
          &nbsp;
          –ì—Ä–∞–¥:
          &nbsp;
          <select id="city" value={city} onChange={(e) => setCity(e.target.value)}>
            <option value="1">–í—Å–∏—á–∫–∏</option>
            <option value="–°–æ—Ñ–∏—è">–°–æ—Ñ–∏—è</option>
            <option value="–ü–ª–æ–≤–¥–∏–≤">–ü–ª–æ–≤–¥–∏–≤</option>
            <option value="–†—É—Å–µ">–†—É—Å–µ</option>
            <option value="–í–∞—Ä–Ω–∞">–í–∞—Ä–Ω–∞</option>
            <option value="–ë—É—Ä–≥–∞—Å">–ë—É—Ä–≥–∞—Å</option>
            <option value="–ü–ª–µ–≤–µ–Ω">–ü–ª–µ–≤–µ–Ω</option>
          </select>
        </form>
      </div>

      {/* üîπ Book Results */}
      {books.length === 0 ? (
        <p style={{ textAlign: "center", marginTop: "20px" }}>‚ùå –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏.</p>
      ) : (
        <div>
          {books.map((book) => (
            <div className="prod_box_big" key={book.ID}>
              <div className="top_prod_box_big"></div>
              <div className="center_prod_box_big_search">
                <div className="product_img_big">
                  <a href="#">
                    <img src={book.ImagePath} alt={book.Name} width={"100px"} border="0" />
                  </a>
                </div>
                <div className="details_big_box">
                  <div className="product_title_big">{book.Name}</div>
                  <div className="specifications">
                    –ê–≤—Ç–æ—Ä: <span className="blue">{book.Author}</span>
                    <br />
                    –ò–∑–¥–∞—Ç–µ–ª—Å—Ç–≤–æ: <span className="blue">{book.Publisher}</span>
                    <br />
                    –ö–Ω–∏–∂–∞—Ä–Ω–∏—Ü–∞: <span className="blue">{book.BookStore}</span>
                    <br />
                    –ì—Ä–∞–¥: <span className="blue">{book.City}</span>
                    <br />
                    –ê–¥—Ä–µ—Å: <span className="blue">{book.Address}</span>
                  </div>
                  <div className="prod_price_big">
                    –¶–µ–Ω–∞: <span className="reduce">{convertPrice(book.OldPrice)}</span>
                    <span className="price">{convertPrice(book.Price)}</span>
                  </div>
                  <a href="#" onClick={(e) => handleBookClick(e, book.ID)}>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</a>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SearchContent;
